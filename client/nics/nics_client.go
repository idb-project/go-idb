// Code generated by go-swagger; DO NOT EDIT.

package nics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAPIV3Nics returns a list of nics possibly filtered

Return a list of nics, possibly filtered
*/
func (a *Client) GetAPIV3Nics(params *GetAPIV3NicsParams) (*GetAPIV3NicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3NicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Nics",
		Method:             "GET",
		PathPattern:        "/api/v3/nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3NicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3NicsOK), nil

}

/*
GetAPIV3NicsID gets a nic by id

Get a nic by id
*/
func (a *Client) GetAPIV3NicsID(params *GetAPIV3NicsIDParams) (*GetAPIV3NicsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3NicsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3NicsId",
		Method:             "GET",
		PathPattern:        "/api/v3/nics/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3NicsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3NicsIDOK), nil

}

/*
PostAPIV3Nics creates a new nic

Create a new nic
*/
func (a *Client) PostAPIV3Nics(params *PostAPIV3NicsParams) (*PostAPIV3NicsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3NicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3Nics",
		Method:             "POST",
		PathPattern:        "/api/v3/nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3NicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3NicsCreated), nil

}

/*
PutAPIV3NicsID deletes a single nic

Delete a single nic
*/
func (a *Client) PutAPIV3NicsID(params *PutAPIV3NicsIDParams) (*PutAPIV3NicsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3NicsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3NicsId",
		Method:             "PUT",
		PathPattern:        "/api/v3/nics/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3NicsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3NicsIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
