// Code generated by go-swagger; DO NOT EDIT.

package locations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new locations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for locations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIV3LocationsIDID deletes a location

Delete a location
*/
func (a *Client) DeleteAPIV3LocationsIDID(params *DeleteAPIV3LocationsIDIDParams) (*DeleteAPIV3LocationsIDIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3LocationsIDIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3LocationsIdId",
		Method:             "DELETE",
		PathPattern:        "/api/v3/locations/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3LocationsIDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3LocationsIDIDNoContent), nil

}

/*
GetAPIV3Locations returns a list of locations possibly filtered

Return a list of locations, possibly filtered
*/
func (a *Client) GetAPIV3Locations(params *GetAPIV3LocationsParams) (*GetAPIV3LocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Locations",
		Method:             "GET",
		PathPattern:        "/api/v3/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3LocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3LocationsOK), nil

}

/*
GetAPIV3LocationsIDID gets location by id

Get location by id
*/
func (a *Client) GetAPIV3LocationsIDID(params *GetAPIV3LocationsIDIDParams) (*GetAPIV3LocationsIDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LocationsIDIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3LocationsIdId",
		Method:             "GET",
		PathPattern:        "/api/v3/locations/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3LocationsIDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3LocationsIDIDOK), nil

}

/*
GetAPIV3LocationsLevels gets a list of all location levels possibly filtered

Get a list of all location levels, possibly filtered
*/
func (a *Client) GetAPIV3LocationsLevels(params *GetAPIV3LocationsLevelsParams) (*GetAPIV3LocationsLevelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LocationsLevelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3LocationsLevels",
		Method:             "GET",
		PathPattern:        "/api/v3/locations/levels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3LocationsLevelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3LocationsLevelsOK), nil

}

/*
GetAPIV3LocationsRoots gets the location roots

Get the location roots
*/
func (a *Client) GetAPIV3LocationsRoots(params *GetAPIV3LocationsRootsParams) (*GetAPIV3LocationsRootsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LocationsRootsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3LocationsRoots",
		Method:             "GET",
		PathPattern:        "/api/v3/locations/roots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3LocationsRootsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3LocationsRootsOK), nil

}

/*
PostAPIV3LocationsIDID creates a new child location

Create a new child location
*/
func (a *Client) PostAPIV3LocationsIDID(params *PostAPIV3LocationsIDIDParams) (*PostAPIV3LocationsIDIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3LocationsIDIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3LocationsIdId",
		Method:             "POST",
		PathPattern:        "/api/v3/locations/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3LocationsIDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3LocationsIDIDCreated), nil

}

/*
PostAPIV3LocationsRoots creates a new location root

Create a new location root
*/
func (a *Client) PostAPIV3LocationsRoots(params *PostAPIV3LocationsRootsParams) (*PostAPIV3LocationsRootsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3LocationsRootsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3LocationsRoots",
		Method:             "POST",
		PathPattern:        "/api/v3/locations/roots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3LocationsRootsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3LocationsRootsCreated), nil

}

/*
PutAPIV3LocationsIDID updates a location

Update a location
*/
func (a *Client) PutAPIV3LocationsIDID(params *PutAPIV3LocationsIDIDParams) (*PutAPIV3LocationsIDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3LocationsIDIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3LocationsIdId",
		Method:             "PUT",
		PathPattern:        "/api/v3/locations/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3LocationsIDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3LocationsIDIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
