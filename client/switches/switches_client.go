// Code generated by go-swagger; DO NOT EDIT.

package switches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new switches API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for switches API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIV3SwitchesFqdn deletes a switch

Delete a switch
*/
func (a *Client) DeleteAPIV3SwitchesFqdn(params *DeleteAPIV3SwitchesFqdnParams) (*DeleteAPIV3SwitchesFqdnNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3SwitchesFqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3SwitchesFqdn",
		Method:             "DELETE",
		PathPattern:        "/api/v3/switches/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3SwitchesFqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3SwitchesFqdnNoContent), nil

}

/*
DeleteAPIV3SwitchesFqdnPortsNumber deletes a switch port

Delete a switch port
*/
func (a *Client) DeleteAPIV3SwitchesFqdnPortsNumber(params *DeleteAPIV3SwitchesFqdnPortsNumberParams) (*DeleteAPIV3SwitchesFqdnPortsNumberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3SwitchesFqdnPortsNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3SwitchesFqdnPortsNumber",
		Method:             "DELETE",
		PathPattern:        "/api/v3/switches/{fqdn}/ports/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3SwitchesFqdnPortsNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3SwitchesFqdnPortsNumberNoContent), nil

}

/*
GetAPIV3Switches returns a list of switches possibly filtered

Return a list of switches, possibly filtered
*/
func (a *Client) GetAPIV3Switches(params *GetAPIV3SwitchesParams) (*GetAPIV3SwitchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SwitchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Switches",
		Method:             "GET",
		PathPattern:        "/api/v3/switches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SwitchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SwitchesOK), nil

}

/*
GetAPIV3SwitchesFqdn gets a switch by fqdn

Get a switch by fqdn
*/
func (a *Client) GetAPIV3SwitchesFqdn(params *GetAPIV3SwitchesFqdnParams) (*GetAPIV3SwitchesFqdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SwitchesFqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3SwitchesFqdn",
		Method:             "GET",
		PathPattern:        "/api/v3/switches/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SwitchesFqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SwitchesFqdnOK), nil

}

/*
GetAPIV3SwitchesFqdnPorts returns a list of switch ports

Return a list of switch ports
*/
func (a *Client) GetAPIV3SwitchesFqdnPorts(params *GetAPIV3SwitchesFqdnPortsParams) (*GetAPIV3SwitchesFqdnPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SwitchesFqdnPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3SwitchesFqdnPorts",
		Method:             "GET",
		PathPattern:        "/api/v3/switches/{fqdn}/ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SwitchesFqdnPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SwitchesFqdnPortsOK), nil

}

/*
GetAPIV3SwitchesFqdnPortsNumber gets a switch port

Get a switch port
*/
func (a *Client) GetAPIV3SwitchesFqdnPortsNumber(params *GetAPIV3SwitchesFqdnPortsNumberParams) (*GetAPIV3SwitchesFqdnPortsNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SwitchesFqdnPortsNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3SwitchesFqdnPortsNumber",
		Method:             "GET",
		PathPattern:        "/api/v3/switches/{fqdn}/ports/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SwitchesFqdnPortsNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SwitchesFqdnPortsNumberOK), nil

}

/*
PostAPIV3Switches creates a new switch

Create a new switch
*/
func (a *Client) PostAPIV3Switches(params *PostAPIV3SwitchesParams) (*PostAPIV3SwitchesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3SwitchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3Switches",
		Method:             "POST",
		PathPattern:        "/api/v3/switches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3SwitchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3SwitchesCreated), nil

}

/*
PostAPIV3SwitchesFqdnPorts adds a new switch port

Add a new switch port
*/
func (a *Client) PostAPIV3SwitchesFqdnPorts(params *PostAPIV3SwitchesFqdnPortsParams) (*PostAPIV3SwitchesFqdnPortsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3SwitchesFqdnPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3SwitchesFqdnPorts",
		Method:             "POST",
		PathPattern:        "/api/v3/switches/{fqdn}/ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3SwitchesFqdnPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3SwitchesFqdnPortsCreated), nil

}

/*
PutAPIV3SwitchesFqdn updates a switch

Update a switch
*/
func (a *Client) PutAPIV3SwitchesFqdn(params *PutAPIV3SwitchesFqdnParams) (*PutAPIV3SwitchesFqdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3SwitchesFqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3SwitchesFqdn",
		Method:             "PUT",
		PathPattern:        "/api/v3/switches/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3SwitchesFqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3SwitchesFqdnOK), nil

}

/*
PutAPIV3SwitchesFqdnPortsNumber updates a switch port

Update a switch port
*/
func (a *Client) PutAPIV3SwitchesFqdnPortsNumber(params *PutAPIV3SwitchesFqdnPortsNumberParams) (*PutAPIV3SwitchesFqdnPortsNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3SwitchesFqdnPortsNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3SwitchesFqdnPortsNumber",
		Method:             "PUT",
		PathPattern:        "/api/v3/switches/{fqdn}/ports/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3SwitchesFqdnPortsNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3SwitchesFqdnPortsNumberOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
