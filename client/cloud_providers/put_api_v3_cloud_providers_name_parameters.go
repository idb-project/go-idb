// Code generated by go-swagger; DO NOT EDIT.

package cloud_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutAPIV3CloudProvidersNameParams creates a new PutAPIV3CloudProvidersNameParams object
// with the default values initialized.
func NewPutAPIV3CloudProvidersNameParams() *PutAPIV3CloudProvidersNameParams {
	var ()
	return &PutAPIV3CloudProvidersNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutAPIV3CloudProvidersNameParamsWithTimeout creates a new PutAPIV3CloudProvidersNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutAPIV3CloudProvidersNameParamsWithTimeout(timeout time.Duration) *PutAPIV3CloudProvidersNameParams {
	var ()
	return &PutAPIV3CloudProvidersNameParams{

		timeout: timeout,
	}
}

// NewPutAPIV3CloudProvidersNameParamsWithContext creates a new PutAPIV3CloudProvidersNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutAPIV3CloudProvidersNameParamsWithContext(ctx context.Context) *PutAPIV3CloudProvidersNameParams {
	var ()
	return &PutAPIV3CloudProvidersNameParams{

		Context: ctx,
	}
}

// NewPutAPIV3CloudProvidersNameParamsWithHTTPClient creates a new PutAPIV3CloudProvidersNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutAPIV3CloudProvidersNameParamsWithHTTPClient(client *http.Client) *PutAPIV3CloudProvidersNameParams {
	var ()
	return &PutAPIV3CloudProvidersNameParams{
		HTTPClient: client,
	}
}

/*PutAPIV3CloudProvidersNameParams contains all the parameters to send to the API endpoint
for the put Api v3 cloud providers name operation typically these are written to a http.Request
*/
type PutAPIV3CloudProvidersNameParams struct {

	/*Apidocs
	  Link to API documentation for this Cloud Provider

	*/
	Apidocs *string
	/*Config
	  Cloud Provider configuration

	*/
	Config string
	/*Description
	  Cloud Provider description

	*/
	Description *string
	/*Name
	  Cloud Provider name

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) WithTimeout(timeout time.Duration) *PutAPIV3CloudProvidersNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) WithContext(ctx context.Context) *PutAPIV3CloudProvidersNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) WithHTTPClient(client *http.Client) *PutAPIV3CloudProvidersNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApidocs adds the apidocs to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) WithApidocs(apidocs *string) *PutAPIV3CloudProvidersNameParams {
	o.SetApidocs(apidocs)
	return o
}

// SetApidocs adds the apidocs to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) SetApidocs(apidocs *string) {
	o.Apidocs = apidocs
}

// WithConfig adds the config to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) WithConfig(config string) *PutAPIV3CloudProvidersNameParams {
	o.SetConfig(config)
	return o
}

// SetConfig adds the config to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) SetConfig(config string) {
	o.Config = config
}

// WithDescription adds the description to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) WithDescription(description *string) *PutAPIV3CloudProvidersNameParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) SetDescription(description *string) {
	o.Description = description
}

// WithName adds the name to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) WithName(name string) *PutAPIV3CloudProvidersNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the put Api v3 cloud providers name params
func (o *PutAPIV3CloudProvidersNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *PutAPIV3CloudProvidersNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Apidocs != nil {

		// form param apidocs
		var frApidocs string
		if o.Apidocs != nil {
			frApidocs = *o.Apidocs
		}
		fApidocs := frApidocs
		if fApidocs != "" {
			if err := r.SetFormParam("apidocs", fApidocs); err != nil {
				return err
			}
		}

	}

	// form param config
	frConfig := o.Config
	fConfig := frConfig
	if fConfig != "" {
		if err := r.SetFormParam("config", fConfig); err != nil {
			return err
		}
	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
