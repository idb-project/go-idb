// Code generated by go-swagger; DO NOT EDIT.

package cloud_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cloud providers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud providers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAPIV3CloudProviders returns a list of cloud providers possibly filtered

Return a list of cloud providers, possibly filtered
*/
func (a *Client) GetAPIV3CloudProviders(params *GetAPIV3CloudProvidersParams) (*GetAPIV3CloudProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3CloudProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3CloudProviders",
		Method:             "GET",
		PathPattern:        "/api/v3/cloud_providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3CloudProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3CloudProvidersOK), nil

}

/*
GetAPIV3CloudProvidersName deletes cloud provider by name

Delete cloud provider by name
*/
func (a *Client) GetAPIV3CloudProvidersName(params *GetAPIV3CloudProvidersNameParams) (*GetAPIV3CloudProvidersNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3CloudProvidersNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3CloudProvidersName",
		Method:             "GET",
		PathPattern:        "/api/v3/cloud_providers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3CloudProvidersNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3CloudProvidersNameOK), nil

}

/*
PostAPIV3CloudProviders creates a new cloud provider

Create a new cloud provider
*/
func (a *Client) PostAPIV3CloudProviders(params *PostAPIV3CloudProvidersParams) (*PostAPIV3CloudProvidersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3CloudProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3CloudProviders",
		Method:             "POST",
		PathPattern:        "/api/v3/cloud_providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3CloudProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3CloudProvidersCreated), nil

}

/*
PutAPIV3CloudProvidersName updates a single cloud provider

Update a single cloud provider
*/
func (a *Client) PutAPIV3CloudProvidersName(params *PutAPIV3CloudProvidersNameParams) (*PutAPIV3CloudProvidersNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3CloudProvidersNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3CloudProvidersName",
		Method:             "PUT",
		PathPattern:        "/api/v3/cloud_providers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3CloudProvidersNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3CloudProvidersNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
