// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new inventories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIV3InventoriesInventoryNumber deletes a inventory

Delete a inventory
*/
func (a *Client) DeleteAPIV3InventoriesInventoryNumber(params *DeleteAPIV3InventoriesInventoryNumberParams) (*DeleteAPIV3InventoriesInventoryNumberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3InventoriesInventoryNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3InventoriesInventoryNumber",
		Method:             "DELETE",
		PathPattern:        "/api/v3/inventories/{inventory_number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3InventoriesInventoryNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3InventoriesInventoryNumberNoContent), nil

}

/*
DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprint deletes an attachment

Delete an attachment
*/
func (a *Client) DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprint(params *DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintParams) (*DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3InventoriesInventoryNumberAttachmentsFingerprint",
		Method:             "DELETE",
		PathPattern:        "/api/v3/inventories/{inventory_number}/attachments/{fingerprint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintNoContent), nil

}

/*
GetAPIV3Inventories returns a list of inventories possibly filtered

Return a list of inventories, possibly filtered
*/
func (a *Client) GetAPIV3Inventories(params *GetAPIV3InventoriesParams) (*GetAPIV3InventoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3InventoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Inventories",
		Method:             "GET",
		PathPattern:        "/api/v3/inventories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3InventoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3InventoriesOK), nil

}

/*
GetAPIV3InventoriesInventoryNumber gets a inventory by inventory number

Get a inventory by inventory number
*/
func (a *Client) GetAPIV3InventoriesInventoryNumber(params *GetAPIV3InventoriesInventoryNumberParams) (*GetAPIV3InventoriesInventoryNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3InventoriesInventoryNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3InventoriesInventoryNumber",
		Method:             "GET",
		PathPattern:        "/api/v3/inventories/{inventory_number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3InventoriesInventoryNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3InventoriesInventoryNumberOK), nil

}

/*
GetAPIV3InventoriesInventoryNumberAttachments gets all attachments

Get all attachments
*/
func (a *Client) GetAPIV3InventoriesInventoryNumberAttachments(params *GetAPIV3InventoriesInventoryNumberAttachmentsParams) (*GetAPIV3InventoriesInventoryNumberAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3InventoriesInventoryNumberAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3InventoriesInventoryNumberAttachments",
		Method:             "GET",
		PathPattern:        "/api/v3/inventories/{inventory_number}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3InventoriesInventoryNumberAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3InventoriesInventoryNumberAttachmentsOK), nil

}

/*
GetAPIV3InventoriesInventoryNumberAttachmentsFingerprint gets an attachment

Get an attachment
 WAT?
*/
func (a *Client) GetAPIV3InventoriesInventoryNumberAttachmentsFingerprint(params *GetAPIV3InventoriesInventoryNumberAttachmentsFingerprintParams) (*GetAPIV3InventoriesInventoryNumberAttachmentsFingerprintOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3InventoriesInventoryNumberAttachmentsFingerprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3InventoriesInventoryNumberAttachmentsFingerprint",
		Method:             "GET",
		PathPattern:        "/api/v3/inventories/{inventory_number}/attachments/{fingerprint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3InventoriesInventoryNumberAttachmentsFingerprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3InventoriesInventoryNumberAttachmentsFingerprintOK), nil

}

/*
PostAPIV3Inventories creates a new inventory

Create a new inventory
*/
func (a *Client) PostAPIV3Inventories(params *PostAPIV3InventoriesParams) (*PostAPIV3InventoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3InventoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3Inventories",
		Method:             "POST",
		PathPattern:        "/api/v3/inventories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3InventoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3InventoriesCreated), nil

}

/*
PostAPIV3InventoriesInventoryNumberAttachments creates an attachment

Create an attachment
*/
func (a *Client) PostAPIV3InventoriesInventoryNumberAttachments(params *PostAPIV3InventoriesInventoryNumberAttachmentsParams) (*PostAPIV3InventoriesInventoryNumberAttachmentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3InventoriesInventoryNumberAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3InventoriesInventoryNumberAttachments",
		Method:             "POST",
		PathPattern:        "/api/v3/inventories/{inventory_number}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3InventoriesInventoryNumberAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3InventoriesInventoryNumberAttachmentsCreated), nil

}

/*
PutAPIV3InventoriesInventoryNumber updates a single inventory

Update a single inventory
*/
func (a *Client) PutAPIV3InventoriesInventoryNumber(params *PutAPIV3InventoriesInventoryNumberParams) (*PutAPIV3InventoriesInventoryNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3InventoriesInventoryNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3InventoriesInventoryNumber",
		Method:             "PUT",
		PathPattern:        "/api/v3/inventories/{inventory_number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3InventoriesInventoryNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3InventoriesInventoryNumberOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
