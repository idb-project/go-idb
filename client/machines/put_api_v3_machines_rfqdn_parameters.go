// Code generated by go-swagger; DO NOT EDIT.

package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutAPIV3MachinesRfqdnParams creates a new PutAPIV3MachinesRfqdnParams object
// with the default values initialized.
func NewPutAPIV3MachinesRfqdnParams() *PutAPIV3MachinesRfqdnParams {
	var ()
	return &PutAPIV3MachinesRfqdnParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutAPIV3MachinesRfqdnParamsWithTimeout creates a new PutAPIV3MachinesRfqdnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutAPIV3MachinesRfqdnParamsWithTimeout(timeout time.Duration) *PutAPIV3MachinesRfqdnParams {
	var ()
	return &PutAPIV3MachinesRfqdnParams{

		timeout: timeout,
	}
}

// NewPutAPIV3MachinesRfqdnParamsWithContext creates a new PutAPIV3MachinesRfqdnParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutAPIV3MachinesRfqdnParamsWithContext(ctx context.Context) *PutAPIV3MachinesRfqdnParams {
	var ()
	return &PutAPIV3MachinesRfqdnParams{

		Context: ctx,
	}
}

// NewPutAPIV3MachinesRfqdnParamsWithHTTPClient creates a new PutAPIV3MachinesRfqdnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutAPIV3MachinesRfqdnParamsWithHTTPClient(client *http.Client) *PutAPIV3MachinesRfqdnParams {
	var ()
	return &PutAPIV3MachinesRfqdnParams{
		HTTPClient: client,
	}
}

/*PutAPIV3MachinesRfqdnParams contains all the parameters to send to the API endpoint
for the put Api v3 machines rfqdn operation typically these are written to a http.Request
*/
type PutAPIV3MachinesRfqdnParams struct {

	/*Arch
	  Architecture

	*/
	Arch *string
	/*AutoUpdate
	  true if the machine is updated automatically

	*/
	AutoUpdate *bool
	/*BackupBrand*/
	BackupBrand *int32
	/*BackupLastDiffRun
	  Last differential backup time

	*/
	BackupLastDiffRun *string
	/*BackupLastDiffSize
	  Last differential backup size

	*/
	BackupLastDiffSize *int64
	/*BackupLastFullRun
	  Last full backup time

	*/
	BackupLastFullRun *string
	/*BackupLastFullSize
	  Last full backup size

	*/
	BackupLastFullSize *int64
	/*BackupLastIncRun
	  Last incremental backup time

	*/
	BackupLastIncRun *string
	/*BackupLastIncSize
	  Last incremental backup size

	*/
	BackupLastIncSize *int64
	/*BackupType
	  Backup type

	*/
	BackupType *int32
	/*BusinessCriticality
	  Business Criticality

	*/
	BusinessCriticality *string
	/*BusinessNotification
	  Business Notification

	*/
	BusinessNotification *string
	/*BusinessPurpose
	  Business purpose

	*/
	BusinessPurpose *string
	/*ConfigInstructions
	  Configuration instructions

	*/
	ConfigInstructions *string
	/*Cores
	  Number of CPU cores

	*/
	Cores *int32
	/*CreatedAt
	  Creation date RFC3999 formatted

	*/
	CreatedAt *string
	/*DeletedAt
	  Deletion date RFC3999 formatted

	*/
	DeletedAt *string
	/*Description
	  Description

	*/
	Description *string
	/*Diskspace
	  Disc space in bytes

	*/
	Diskspace *int32
	/*Fqdn
	  FQDN

	*/
	Fqdn string
	/*MrtgURL*/
	MrtgURL *string
	/*NeedsReboot*/
	NeedsReboot *bool
	/*Os
	  Operating system

	*/
	Os *string
	/*OsRelease
	  Operating system release

	*/
	OsRelease *string
	/*PendingSecurityUpdates*/
	PendingSecurityUpdates *int32
	/*PendingUpdates*/
	PendingUpdates *int32
	/*PendingUpdatesPackageNames*/
	PendingUpdatesPackageNames *string
	/*PendingUpdatesSum*/
	PendingUpdatesSum *int32
	/*PowerFeedA
	  Location id of power feed a

	*/
	PowerFeedA *int32
	/*PowerFeedB
	  Location id of power feed b

	*/
	PowerFeedB *int32
	/*RAM
	  Amount of RAM in MB

	*/
	RAM *int32
	/*RawDataAPI*/
	RawDataAPI *string
	/*RawDataPuppetdb*/
	RawDataPuppetdb *string
	/*Rfqdn*/
	Rfqdn string
	/*Serialnumber
	  Serial number

	*/
	Serialnumber *string
	/*ServicedAt
	  Service date RFC3999 formatted

	*/
	ServicedAt *string
	/*SeverityClass*/
	SeverityClass *string
	/*Software
	  Known installed doftware packages

	*/
	Software []string
	/*SwCharacteristics
	  Software characteristics

	*/
	SwCharacteristics *string
	/*SwitchURL*/
	SwitchURL *string
	/*UcsRole*/
	UcsRole *string
	/*UnattendedUpgrades*/
	UnattendedUpgrades *bool
	/*UnattendedUpgradesBlacklistedPackages*/
	UnattendedUpgradesBlacklistedPackages *string
	/*UnattendedUpgradesReboot*/
	UnattendedUpgradesReboot *bool
	/*UnattendedUpgradesRepos*/
	UnattendedUpgradesRepos *string
	/*UnattendedUpgradesTime*/
	UnattendedUpgradesTime *string
	/*UpdatedAt
	  Update date RFC3999 formatted

	*/
	UpdatedAt *string
	/*Uptime
	  Uptime in seconds

	*/
	Uptime *int32
	/*Vmhost
	  FQDN of virtual machine host if this is a virtual machine

	*/
	Vmhost *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithTimeout(timeout time.Duration) *PutAPIV3MachinesRfqdnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithContext(ctx context.Context) *PutAPIV3MachinesRfqdnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithHTTPClient(client *http.Client) *PutAPIV3MachinesRfqdnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArch adds the arch to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithArch(arch *string) *PutAPIV3MachinesRfqdnParams {
	o.SetArch(arch)
	return o
}

// SetArch adds the arch to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetArch(arch *string) {
	o.Arch = arch
}

// WithAutoUpdate adds the autoUpdate to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithAutoUpdate(autoUpdate *bool) *PutAPIV3MachinesRfqdnParams {
	o.SetAutoUpdate(autoUpdate)
	return o
}

// SetAutoUpdate adds the autoUpdate to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetAutoUpdate(autoUpdate *bool) {
	o.AutoUpdate = autoUpdate
}

// WithBackupBrand adds the backupBrand to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBackupBrand(backupBrand *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetBackupBrand(backupBrand)
	return o
}

// SetBackupBrand adds the backupBrand to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBackupBrand(backupBrand *int32) {
	o.BackupBrand = backupBrand
}

// WithBackupLastDiffRun adds the backupLastDiffRun to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBackupLastDiffRun(backupLastDiffRun *string) *PutAPIV3MachinesRfqdnParams {
	o.SetBackupLastDiffRun(backupLastDiffRun)
	return o
}

// SetBackupLastDiffRun adds the backupLastDiffRun to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBackupLastDiffRun(backupLastDiffRun *string) {
	o.BackupLastDiffRun = backupLastDiffRun
}

// WithBackupLastDiffSize adds the backupLastDiffSize to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBackupLastDiffSize(backupLastDiffSize *int64) *PutAPIV3MachinesRfqdnParams {
	o.SetBackupLastDiffSize(backupLastDiffSize)
	return o
}

// SetBackupLastDiffSize adds the backupLastDiffSize to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBackupLastDiffSize(backupLastDiffSize *int64) {
	o.BackupLastDiffSize = backupLastDiffSize
}

// WithBackupLastFullRun adds the backupLastFullRun to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBackupLastFullRun(backupLastFullRun *string) *PutAPIV3MachinesRfqdnParams {
	o.SetBackupLastFullRun(backupLastFullRun)
	return o
}

// SetBackupLastFullRun adds the backupLastFullRun to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBackupLastFullRun(backupLastFullRun *string) {
	o.BackupLastFullRun = backupLastFullRun
}

// WithBackupLastFullSize adds the backupLastFullSize to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBackupLastFullSize(backupLastFullSize *int64) *PutAPIV3MachinesRfqdnParams {
	o.SetBackupLastFullSize(backupLastFullSize)
	return o
}

// SetBackupLastFullSize adds the backupLastFullSize to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBackupLastFullSize(backupLastFullSize *int64) {
	o.BackupLastFullSize = backupLastFullSize
}

// WithBackupLastIncRun adds the backupLastIncRun to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBackupLastIncRun(backupLastIncRun *string) *PutAPIV3MachinesRfqdnParams {
	o.SetBackupLastIncRun(backupLastIncRun)
	return o
}

// SetBackupLastIncRun adds the backupLastIncRun to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBackupLastIncRun(backupLastIncRun *string) {
	o.BackupLastIncRun = backupLastIncRun
}

// WithBackupLastIncSize adds the backupLastIncSize to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBackupLastIncSize(backupLastIncSize *int64) *PutAPIV3MachinesRfqdnParams {
	o.SetBackupLastIncSize(backupLastIncSize)
	return o
}

// SetBackupLastIncSize adds the backupLastIncSize to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBackupLastIncSize(backupLastIncSize *int64) {
	o.BackupLastIncSize = backupLastIncSize
}

// WithBackupType adds the backupType to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBackupType(backupType *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetBackupType(backupType)
	return o
}

// SetBackupType adds the backupType to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBackupType(backupType *int32) {
	o.BackupType = backupType
}

// WithBusinessCriticality adds the businessCriticality to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBusinessCriticality(businessCriticality *string) *PutAPIV3MachinesRfqdnParams {
	o.SetBusinessCriticality(businessCriticality)
	return o
}

// SetBusinessCriticality adds the businessCriticality to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBusinessCriticality(businessCriticality *string) {
	o.BusinessCriticality = businessCriticality
}

// WithBusinessNotification adds the businessNotification to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBusinessNotification(businessNotification *string) *PutAPIV3MachinesRfqdnParams {
	o.SetBusinessNotification(businessNotification)
	return o
}

// SetBusinessNotification adds the businessNotification to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBusinessNotification(businessNotification *string) {
	o.BusinessNotification = businessNotification
}

// WithBusinessPurpose adds the businessPurpose to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithBusinessPurpose(businessPurpose *string) *PutAPIV3MachinesRfqdnParams {
	o.SetBusinessPurpose(businessPurpose)
	return o
}

// SetBusinessPurpose adds the businessPurpose to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetBusinessPurpose(businessPurpose *string) {
	o.BusinessPurpose = businessPurpose
}

// WithConfigInstructions adds the configInstructions to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithConfigInstructions(configInstructions *string) *PutAPIV3MachinesRfqdnParams {
	o.SetConfigInstructions(configInstructions)
	return o
}

// SetConfigInstructions adds the configInstructions to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetConfigInstructions(configInstructions *string) {
	o.ConfigInstructions = configInstructions
}

// WithCores adds the cores to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithCores(cores *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetCores(cores)
	return o
}

// SetCores adds the cores to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetCores(cores *int32) {
	o.Cores = cores
}

// WithCreatedAt adds the createdAt to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithCreatedAt(createdAt *string) *PutAPIV3MachinesRfqdnParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithDeletedAt adds the deletedAt to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithDeletedAt(deletedAt *string) *PutAPIV3MachinesRfqdnParams {
	o.SetDeletedAt(deletedAt)
	return o
}

// SetDeletedAt adds the deletedAt to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetDeletedAt(deletedAt *string) {
	o.DeletedAt = deletedAt
}

// WithDescription adds the description to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithDescription(description *string) *PutAPIV3MachinesRfqdnParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetDescription(description *string) {
	o.Description = description
}

// WithDiskspace adds the diskspace to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithDiskspace(diskspace *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetDiskspace(diskspace)
	return o
}

// SetDiskspace adds the diskspace to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetDiskspace(diskspace *int32) {
	o.Diskspace = diskspace
}

// WithFqdn adds the fqdn to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithFqdn(fqdn string) *PutAPIV3MachinesRfqdnParams {
	o.SetFqdn(fqdn)
	return o
}

// SetFqdn adds the fqdn to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetFqdn(fqdn string) {
	o.Fqdn = fqdn
}

// WithMrtgURL adds the mrtgURL to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithMrtgURL(mrtgURL *string) *PutAPIV3MachinesRfqdnParams {
	o.SetMrtgURL(mrtgURL)
	return o
}

// SetMrtgURL adds the mrtgUrl to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetMrtgURL(mrtgURL *string) {
	o.MrtgURL = mrtgURL
}

// WithNeedsReboot adds the needsReboot to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithNeedsReboot(needsReboot *bool) *PutAPIV3MachinesRfqdnParams {
	o.SetNeedsReboot(needsReboot)
	return o
}

// SetNeedsReboot adds the needsReboot to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetNeedsReboot(needsReboot *bool) {
	o.NeedsReboot = needsReboot
}

// WithOs adds the os to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithOs(os *string) *PutAPIV3MachinesRfqdnParams {
	o.SetOs(os)
	return o
}

// SetOs adds the os to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetOs(os *string) {
	o.Os = os
}

// WithOsRelease adds the osRelease to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithOsRelease(osRelease *string) *PutAPIV3MachinesRfqdnParams {
	o.SetOsRelease(osRelease)
	return o
}

// SetOsRelease adds the osRelease to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetOsRelease(osRelease *string) {
	o.OsRelease = osRelease
}

// WithPendingSecurityUpdates adds the pendingSecurityUpdates to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithPendingSecurityUpdates(pendingSecurityUpdates *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetPendingSecurityUpdates(pendingSecurityUpdates)
	return o
}

// SetPendingSecurityUpdates adds the pendingSecurityUpdates to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetPendingSecurityUpdates(pendingSecurityUpdates *int32) {
	o.PendingSecurityUpdates = pendingSecurityUpdates
}

// WithPendingUpdates adds the pendingUpdates to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithPendingUpdates(pendingUpdates *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetPendingUpdates(pendingUpdates)
	return o
}

// SetPendingUpdates adds the pendingUpdates to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetPendingUpdates(pendingUpdates *int32) {
	o.PendingUpdates = pendingUpdates
}

// WithPendingUpdatesPackageNames adds the pendingUpdatesPackageNames to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithPendingUpdatesPackageNames(pendingUpdatesPackageNames *string) *PutAPIV3MachinesRfqdnParams {
	o.SetPendingUpdatesPackageNames(pendingUpdatesPackageNames)
	return o
}

// SetPendingUpdatesPackageNames adds the pendingUpdatesPackageNames to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetPendingUpdatesPackageNames(pendingUpdatesPackageNames *string) {
	o.PendingUpdatesPackageNames = pendingUpdatesPackageNames
}

// WithPendingUpdatesSum adds the pendingUpdatesSum to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithPendingUpdatesSum(pendingUpdatesSum *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetPendingUpdatesSum(pendingUpdatesSum)
	return o
}

// SetPendingUpdatesSum adds the pendingUpdatesSum to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetPendingUpdatesSum(pendingUpdatesSum *int32) {
	o.PendingUpdatesSum = pendingUpdatesSum
}

// WithPowerFeedA adds the powerFeedA to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithPowerFeedA(powerFeedA *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetPowerFeedA(powerFeedA)
	return o
}

// SetPowerFeedA adds the powerFeedA to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetPowerFeedA(powerFeedA *int32) {
	o.PowerFeedA = powerFeedA
}

// WithPowerFeedB adds the powerFeedB to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithPowerFeedB(powerFeedB *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetPowerFeedB(powerFeedB)
	return o
}

// SetPowerFeedB adds the powerFeedB to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetPowerFeedB(powerFeedB *int32) {
	o.PowerFeedB = powerFeedB
}

// WithRAM adds the ram to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithRAM(ram *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetRAM(ram)
	return o
}

// SetRAM adds the ram to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetRAM(ram *int32) {
	o.RAM = ram
}

// WithRawDataAPI adds the rawDataAPI to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithRawDataAPI(rawDataAPI *string) *PutAPIV3MachinesRfqdnParams {
	o.SetRawDataAPI(rawDataAPI)
	return o
}

// SetRawDataAPI adds the rawDataApi to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetRawDataAPI(rawDataAPI *string) {
	o.RawDataAPI = rawDataAPI
}

// WithRawDataPuppetdb adds the rawDataPuppetdb to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithRawDataPuppetdb(rawDataPuppetdb *string) *PutAPIV3MachinesRfqdnParams {
	o.SetRawDataPuppetdb(rawDataPuppetdb)
	return o
}

// SetRawDataPuppetdb adds the rawDataPuppetdb to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetRawDataPuppetdb(rawDataPuppetdb *string) {
	o.RawDataPuppetdb = rawDataPuppetdb
}

// WithRfqdn adds the rfqdn to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithRfqdn(rfqdn string) *PutAPIV3MachinesRfqdnParams {
	o.SetRfqdn(rfqdn)
	return o
}

// SetRfqdn adds the rfqdn to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetRfqdn(rfqdn string) {
	o.Rfqdn = rfqdn
}

// WithSerialnumber adds the serialnumber to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithSerialnumber(serialnumber *string) *PutAPIV3MachinesRfqdnParams {
	o.SetSerialnumber(serialnumber)
	return o
}

// SetSerialnumber adds the serialnumber to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetSerialnumber(serialnumber *string) {
	o.Serialnumber = serialnumber
}

// WithServicedAt adds the servicedAt to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithServicedAt(servicedAt *string) *PutAPIV3MachinesRfqdnParams {
	o.SetServicedAt(servicedAt)
	return o
}

// SetServicedAt adds the servicedAt to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetServicedAt(servicedAt *string) {
	o.ServicedAt = servicedAt
}

// WithSeverityClass adds the severityClass to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithSeverityClass(severityClass *string) *PutAPIV3MachinesRfqdnParams {
	o.SetSeverityClass(severityClass)
	return o
}

// SetSeverityClass adds the severityClass to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetSeverityClass(severityClass *string) {
	o.SeverityClass = severityClass
}

// WithSoftware adds the software to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithSoftware(software []string) *PutAPIV3MachinesRfqdnParams {
	o.SetSoftware(software)
	return o
}

// SetSoftware adds the software to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetSoftware(software []string) {
	o.Software = software
}

// WithSwCharacteristics adds the swCharacteristics to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithSwCharacteristics(swCharacteristics *string) *PutAPIV3MachinesRfqdnParams {
	o.SetSwCharacteristics(swCharacteristics)
	return o
}

// SetSwCharacteristics adds the swCharacteristics to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetSwCharacteristics(swCharacteristics *string) {
	o.SwCharacteristics = swCharacteristics
}

// WithSwitchURL adds the switchURL to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithSwitchURL(switchURL *string) *PutAPIV3MachinesRfqdnParams {
	o.SetSwitchURL(switchURL)
	return o
}

// SetSwitchURL adds the switchUrl to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetSwitchURL(switchURL *string) {
	o.SwitchURL = switchURL
}

// WithUcsRole adds the ucsRole to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithUcsRole(ucsRole *string) *PutAPIV3MachinesRfqdnParams {
	o.SetUcsRole(ucsRole)
	return o
}

// SetUcsRole adds the ucsRole to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetUcsRole(ucsRole *string) {
	o.UcsRole = ucsRole
}

// WithUnattendedUpgrades adds the unattendedUpgrades to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithUnattendedUpgrades(unattendedUpgrades *bool) *PutAPIV3MachinesRfqdnParams {
	o.SetUnattendedUpgrades(unattendedUpgrades)
	return o
}

// SetUnattendedUpgrades adds the unattendedUpgrades to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetUnattendedUpgrades(unattendedUpgrades *bool) {
	o.UnattendedUpgrades = unattendedUpgrades
}

// WithUnattendedUpgradesBlacklistedPackages adds the unattendedUpgradesBlacklistedPackages to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithUnattendedUpgradesBlacklistedPackages(unattendedUpgradesBlacklistedPackages *string) *PutAPIV3MachinesRfqdnParams {
	o.SetUnattendedUpgradesBlacklistedPackages(unattendedUpgradesBlacklistedPackages)
	return o
}

// SetUnattendedUpgradesBlacklistedPackages adds the unattendedUpgradesBlacklistedPackages to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetUnattendedUpgradesBlacklistedPackages(unattendedUpgradesBlacklistedPackages *string) {
	o.UnattendedUpgradesBlacklistedPackages = unattendedUpgradesBlacklistedPackages
}

// WithUnattendedUpgradesReboot adds the unattendedUpgradesReboot to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithUnattendedUpgradesReboot(unattendedUpgradesReboot *bool) *PutAPIV3MachinesRfqdnParams {
	o.SetUnattendedUpgradesReboot(unattendedUpgradesReboot)
	return o
}

// SetUnattendedUpgradesReboot adds the unattendedUpgradesReboot to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetUnattendedUpgradesReboot(unattendedUpgradesReboot *bool) {
	o.UnattendedUpgradesReboot = unattendedUpgradesReboot
}

// WithUnattendedUpgradesRepos adds the unattendedUpgradesRepos to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithUnattendedUpgradesRepos(unattendedUpgradesRepos *string) *PutAPIV3MachinesRfqdnParams {
	o.SetUnattendedUpgradesRepos(unattendedUpgradesRepos)
	return o
}

// SetUnattendedUpgradesRepos adds the unattendedUpgradesRepos to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetUnattendedUpgradesRepos(unattendedUpgradesRepos *string) {
	o.UnattendedUpgradesRepos = unattendedUpgradesRepos
}

// WithUnattendedUpgradesTime adds the unattendedUpgradesTime to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithUnattendedUpgradesTime(unattendedUpgradesTime *string) *PutAPIV3MachinesRfqdnParams {
	o.SetUnattendedUpgradesTime(unattendedUpgradesTime)
	return o
}

// SetUnattendedUpgradesTime adds the unattendedUpgradesTime to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetUnattendedUpgradesTime(unattendedUpgradesTime *string) {
	o.UnattendedUpgradesTime = unattendedUpgradesTime
}

// WithUpdatedAt adds the updatedAt to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithUpdatedAt(updatedAt *string) *PutAPIV3MachinesRfqdnParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUptime adds the uptime to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithUptime(uptime *int32) *PutAPIV3MachinesRfqdnParams {
	o.SetUptime(uptime)
	return o
}

// SetUptime adds the uptime to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetUptime(uptime *int32) {
	o.Uptime = uptime
}

// WithVmhost adds the vmhost to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) WithVmhost(vmhost *string) *PutAPIV3MachinesRfqdnParams {
	o.SetVmhost(vmhost)
	return o
}

// SetVmhost adds the vmhost to the put Api v3 machines rfqdn params
func (o *PutAPIV3MachinesRfqdnParams) SetVmhost(vmhost *string) {
	o.Vmhost = vmhost
}

// WriteToRequest writes these params to a swagger request
func (o *PutAPIV3MachinesRfqdnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Arch != nil {

		// form param arch
		var frArch string
		if o.Arch != nil {
			frArch = *o.Arch
		}
		fArch := frArch
		if fArch != "" {
			if err := r.SetFormParam("arch", fArch); err != nil {
				return err
			}
		}

	}

	if o.AutoUpdate != nil {

		// form param auto_update
		var frAutoUpdate bool
		if o.AutoUpdate != nil {
			frAutoUpdate = *o.AutoUpdate
		}
		fAutoUpdate := swag.FormatBool(frAutoUpdate)
		if fAutoUpdate != "" {
			if err := r.SetFormParam("auto_update", fAutoUpdate); err != nil {
				return err
			}
		}

	}

	if o.BackupBrand != nil {

		// form param backup_brand
		var frBackupBrand int32
		if o.BackupBrand != nil {
			frBackupBrand = *o.BackupBrand
		}
		fBackupBrand := swag.FormatInt32(frBackupBrand)
		if fBackupBrand != "" {
			if err := r.SetFormParam("backup_brand", fBackupBrand); err != nil {
				return err
			}
		}

	}

	if o.BackupLastDiffRun != nil {

		// form param backup_last_diff_run
		var frBackupLastDiffRun string
		if o.BackupLastDiffRun != nil {
			frBackupLastDiffRun = *o.BackupLastDiffRun
		}
		fBackupLastDiffRun := frBackupLastDiffRun
		if fBackupLastDiffRun != "" {
			if err := r.SetFormParam("backup_last_diff_run", fBackupLastDiffRun); err != nil {
				return err
			}
		}

	}

	if o.BackupLastDiffSize != nil {

		// form param backup_last_diff_size
		var frBackupLastDiffSize int64
		if o.BackupLastDiffSize != nil {
			frBackupLastDiffSize = *o.BackupLastDiffSize
		}
		fBackupLastDiffSize := swag.FormatInt64(frBackupLastDiffSize)
		if fBackupLastDiffSize != "" {
			if err := r.SetFormParam("backup_last_diff_size", fBackupLastDiffSize); err != nil {
				return err
			}
		}

	}

	if o.BackupLastFullRun != nil {

		// form param backup_last_full_run
		var frBackupLastFullRun string
		if o.BackupLastFullRun != nil {
			frBackupLastFullRun = *o.BackupLastFullRun
		}
		fBackupLastFullRun := frBackupLastFullRun
		if fBackupLastFullRun != "" {
			if err := r.SetFormParam("backup_last_full_run", fBackupLastFullRun); err != nil {
				return err
			}
		}

	}

	if o.BackupLastFullSize != nil {

		// form param backup_last_full_size
		var frBackupLastFullSize int64
		if o.BackupLastFullSize != nil {
			frBackupLastFullSize = *o.BackupLastFullSize
		}
		fBackupLastFullSize := swag.FormatInt64(frBackupLastFullSize)
		if fBackupLastFullSize != "" {
			if err := r.SetFormParam("backup_last_full_size", fBackupLastFullSize); err != nil {
				return err
			}
		}

	}

	if o.BackupLastIncRun != nil {

		// form param backup_last_inc_run
		var frBackupLastIncRun string
		if o.BackupLastIncRun != nil {
			frBackupLastIncRun = *o.BackupLastIncRun
		}
		fBackupLastIncRun := frBackupLastIncRun
		if fBackupLastIncRun != "" {
			if err := r.SetFormParam("backup_last_inc_run", fBackupLastIncRun); err != nil {
				return err
			}
		}

	}

	if o.BackupLastIncSize != nil {

		// form param backup_last_inc_size
		var frBackupLastIncSize int64
		if o.BackupLastIncSize != nil {
			frBackupLastIncSize = *o.BackupLastIncSize
		}
		fBackupLastIncSize := swag.FormatInt64(frBackupLastIncSize)
		if fBackupLastIncSize != "" {
			if err := r.SetFormParam("backup_last_inc_size", fBackupLastIncSize); err != nil {
				return err
			}
		}

	}

	if o.BackupType != nil {

		// form param backup_type
		var frBackupType int32
		if o.BackupType != nil {
			frBackupType = *o.BackupType
		}
		fBackupType := swag.FormatInt32(frBackupType)
		if fBackupType != "" {
			if err := r.SetFormParam("backup_type", fBackupType); err != nil {
				return err
			}
		}

	}

	if o.BusinessCriticality != nil {

		// form param business_criticality
		var frBusinessCriticality string
		if o.BusinessCriticality != nil {
			frBusinessCriticality = *o.BusinessCriticality
		}
		fBusinessCriticality := frBusinessCriticality
		if fBusinessCriticality != "" {
			if err := r.SetFormParam("business_criticality", fBusinessCriticality); err != nil {
				return err
			}
		}

	}

	if o.BusinessNotification != nil {

		// form param business_notification
		var frBusinessNotification string
		if o.BusinessNotification != nil {
			frBusinessNotification = *o.BusinessNotification
		}
		fBusinessNotification := frBusinessNotification
		if fBusinessNotification != "" {
			if err := r.SetFormParam("business_notification", fBusinessNotification); err != nil {
				return err
			}
		}

	}

	if o.BusinessPurpose != nil {

		// form param business_purpose
		var frBusinessPurpose string
		if o.BusinessPurpose != nil {
			frBusinessPurpose = *o.BusinessPurpose
		}
		fBusinessPurpose := frBusinessPurpose
		if fBusinessPurpose != "" {
			if err := r.SetFormParam("business_purpose", fBusinessPurpose); err != nil {
				return err
			}
		}

	}

	if o.ConfigInstructions != nil {

		// form param config_instructions
		var frConfigInstructions string
		if o.ConfigInstructions != nil {
			frConfigInstructions = *o.ConfigInstructions
		}
		fConfigInstructions := frConfigInstructions
		if fConfigInstructions != "" {
			if err := r.SetFormParam("config_instructions", fConfigInstructions); err != nil {
				return err
			}
		}

	}

	if o.Cores != nil {

		// form param cores
		var frCores int32
		if o.Cores != nil {
			frCores = *o.Cores
		}
		fCores := swag.FormatInt32(frCores)
		if fCores != "" {
			if err := r.SetFormParam("cores", fCores); err != nil {
				return err
			}
		}

	}

	if o.CreatedAt != nil {

		// form param created_at
		var frCreatedAt string
		if o.CreatedAt != nil {
			frCreatedAt = *o.CreatedAt
		}
		fCreatedAt := frCreatedAt
		if fCreatedAt != "" {
			if err := r.SetFormParam("created_at", fCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.DeletedAt != nil {

		// form param deleted_at
		var frDeletedAt string
		if o.DeletedAt != nil {
			frDeletedAt = *o.DeletedAt
		}
		fDeletedAt := frDeletedAt
		if fDeletedAt != "" {
			if err := r.SetFormParam("deleted_at", fDeletedAt); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}

	}

	if o.Diskspace != nil {

		// form param diskspace
		var frDiskspace int32
		if o.Diskspace != nil {
			frDiskspace = *o.Diskspace
		}
		fDiskspace := swag.FormatInt32(frDiskspace)
		if fDiskspace != "" {
			if err := r.SetFormParam("diskspace", fDiskspace); err != nil {
				return err
			}
		}

	}

	// form param fqdn
	frFqdn := o.Fqdn
	fFqdn := frFqdn
	if fFqdn != "" {
		if err := r.SetFormParam("fqdn", fFqdn); err != nil {
			return err
		}
	}

	if o.MrtgURL != nil {

		// form param mrtg_url
		var frMrtgURL string
		if o.MrtgURL != nil {
			frMrtgURL = *o.MrtgURL
		}
		fMrtgURL := frMrtgURL
		if fMrtgURL != "" {
			if err := r.SetFormParam("mrtg_url", fMrtgURL); err != nil {
				return err
			}
		}

	}

	if o.NeedsReboot != nil {

		// form param needs_reboot
		var frNeedsReboot bool
		if o.NeedsReboot != nil {
			frNeedsReboot = *o.NeedsReboot
		}
		fNeedsReboot := swag.FormatBool(frNeedsReboot)
		if fNeedsReboot != "" {
			if err := r.SetFormParam("needs_reboot", fNeedsReboot); err != nil {
				return err
			}
		}

	}

	if o.Os != nil {

		// form param os
		var frOs string
		if o.Os != nil {
			frOs = *o.Os
		}
		fOs := frOs
		if fOs != "" {
			if err := r.SetFormParam("os", fOs); err != nil {
				return err
			}
		}

	}

	if o.OsRelease != nil {

		// form param os_release
		var frOsRelease string
		if o.OsRelease != nil {
			frOsRelease = *o.OsRelease
		}
		fOsRelease := frOsRelease
		if fOsRelease != "" {
			if err := r.SetFormParam("os_release", fOsRelease); err != nil {
				return err
			}
		}

	}

	if o.PendingSecurityUpdates != nil {

		// form param pending_security_updates
		var frPendingSecurityUpdates int32
		if o.PendingSecurityUpdates != nil {
			frPendingSecurityUpdates = *o.PendingSecurityUpdates
		}
		fPendingSecurityUpdates := swag.FormatInt32(frPendingSecurityUpdates)
		if fPendingSecurityUpdates != "" {
			if err := r.SetFormParam("pending_security_updates", fPendingSecurityUpdates); err != nil {
				return err
			}
		}

	}

	if o.PendingUpdates != nil {

		// form param pending_updates
		var frPendingUpdates int32
		if o.PendingUpdates != nil {
			frPendingUpdates = *o.PendingUpdates
		}
		fPendingUpdates := swag.FormatInt32(frPendingUpdates)
		if fPendingUpdates != "" {
			if err := r.SetFormParam("pending_updates", fPendingUpdates); err != nil {
				return err
			}
		}

	}

	if o.PendingUpdatesPackageNames != nil {

		// form param pending_updates_package_names
		var frPendingUpdatesPackageNames string
		if o.PendingUpdatesPackageNames != nil {
			frPendingUpdatesPackageNames = *o.PendingUpdatesPackageNames
		}
		fPendingUpdatesPackageNames := frPendingUpdatesPackageNames
		if fPendingUpdatesPackageNames != "" {
			if err := r.SetFormParam("pending_updates_package_names", fPendingUpdatesPackageNames); err != nil {
				return err
			}
		}

	}

	if o.PendingUpdatesSum != nil {

		// form param pending_updates_sum
		var frPendingUpdatesSum int32
		if o.PendingUpdatesSum != nil {
			frPendingUpdatesSum = *o.PendingUpdatesSum
		}
		fPendingUpdatesSum := swag.FormatInt32(frPendingUpdatesSum)
		if fPendingUpdatesSum != "" {
			if err := r.SetFormParam("pending_updates_sum", fPendingUpdatesSum); err != nil {
				return err
			}
		}

	}

	if o.PowerFeedA != nil {

		// form param power_feed_a
		var frPowerFeedA int32
		if o.PowerFeedA != nil {
			frPowerFeedA = *o.PowerFeedA
		}
		fPowerFeedA := swag.FormatInt32(frPowerFeedA)
		if fPowerFeedA != "" {
			if err := r.SetFormParam("power_feed_a", fPowerFeedA); err != nil {
				return err
			}
		}

	}

	if o.PowerFeedB != nil {

		// form param power_feed_b
		var frPowerFeedB int32
		if o.PowerFeedB != nil {
			frPowerFeedB = *o.PowerFeedB
		}
		fPowerFeedB := swag.FormatInt32(frPowerFeedB)
		if fPowerFeedB != "" {
			if err := r.SetFormParam("power_feed_b", fPowerFeedB); err != nil {
				return err
			}
		}

	}

	if o.RAM != nil {

		// form param ram
		var frRAM int32
		if o.RAM != nil {
			frRAM = *o.RAM
		}
		fRAM := swag.FormatInt32(frRAM)
		if fRAM != "" {
			if err := r.SetFormParam("ram", fRAM); err != nil {
				return err
			}
		}

	}

	if o.RawDataAPI != nil {

		// form param raw_data_api
		var frRawDataAPI string
		if o.RawDataAPI != nil {
			frRawDataAPI = *o.RawDataAPI
		}
		fRawDataAPI := frRawDataAPI
		if fRawDataAPI != "" {
			if err := r.SetFormParam("raw_data_api", fRawDataAPI); err != nil {
				return err
			}
		}

	}

	if o.RawDataPuppetdb != nil {

		// form param raw_data_puppetdb
		var frRawDataPuppetdb string
		if o.RawDataPuppetdb != nil {
			frRawDataPuppetdb = *o.RawDataPuppetdb
		}
		fRawDataPuppetdb := frRawDataPuppetdb
		if fRawDataPuppetdb != "" {
			if err := r.SetFormParam("raw_data_puppetdb", fRawDataPuppetdb); err != nil {
				return err
			}
		}

	}

	// path param rfqdn
	if err := r.SetPathParam("rfqdn", o.Rfqdn); err != nil {
		return err
	}

	if o.Serialnumber != nil {

		// form param serialnumber
		var frSerialnumber string
		if o.Serialnumber != nil {
			frSerialnumber = *o.Serialnumber
		}
		fSerialnumber := frSerialnumber
		if fSerialnumber != "" {
			if err := r.SetFormParam("serialnumber", fSerialnumber); err != nil {
				return err
			}
		}

	}

	if o.ServicedAt != nil {

		// form param serviced_at
		var frServicedAt string
		if o.ServicedAt != nil {
			frServicedAt = *o.ServicedAt
		}
		fServicedAt := frServicedAt
		if fServicedAt != "" {
			if err := r.SetFormParam("serviced_at", fServicedAt); err != nil {
				return err
			}
		}

	}

	if o.SeverityClass != nil {

		// form param severity_class
		var frSeverityClass string
		if o.SeverityClass != nil {
			frSeverityClass = *o.SeverityClass
		}
		fSeverityClass := frSeverityClass
		if fSeverityClass != "" {
			if err := r.SetFormParam("severity_class", fSeverityClass); err != nil {
				return err
			}
		}

	}

	valuesSoftware := o.Software

	joinedSoftware := swag.JoinByFormat(valuesSoftware, "")
	// form array param software
	if err := r.SetFormParam("software", joinedSoftware...); err != nil {
		return err
	}

	if o.SwCharacteristics != nil {

		// form param sw_characteristics
		var frSwCharacteristics string
		if o.SwCharacteristics != nil {
			frSwCharacteristics = *o.SwCharacteristics
		}
		fSwCharacteristics := frSwCharacteristics
		if fSwCharacteristics != "" {
			if err := r.SetFormParam("sw_characteristics", fSwCharacteristics); err != nil {
				return err
			}
		}

	}

	if o.SwitchURL != nil {

		// form param switch_url
		var frSwitchURL string
		if o.SwitchURL != nil {
			frSwitchURL = *o.SwitchURL
		}
		fSwitchURL := frSwitchURL
		if fSwitchURL != "" {
			if err := r.SetFormParam("switch_url", fSwitchURL); err != nil {
				return err
			}
		}

	}

	if o.UcsRole != nil {

		// form param ucs_role
		var frUcsRole string
		if o.UcsRole != nil {
			frUcsRole = *o.UcsRole
		}
		fUcsRole := frUcsRole
		if fUcsRole != "" {
			if err := r.SetFormParam("ucs_role", fUcsRole); err != nil {
				return err
			}
		}

	}

	if o.UnattendedUpgrades != nil {

		// form param unattended_upgrades
		var frUnattendedUpgrades bool
		if o.UnattendedUpgrades != nil {
			frUnattendedUpgrades = *o.UnattendedUpgrades
		}
		fUnattendedUpgrades := swag.FormatBool(frUnattendedUpgrades)
		if fUnattendedUpgrades != "" {
			if err := r.SetFormParam("unattended_upgrades", fUnattendedUpgrades); err != nil {
				return err
			}
		}

	}

	if o.UnattendedUpgradesBlacklistedPackages != nil {

		// form param unattended_upgrades_blacklisted_packages
		var frUnattendedUpgradesBlacklistedPackages string
		if o.UnattendedUpgradesBlacklistedPackages != nil {
			frUnattendedUpgradesBlacklistedPackages = *o.UnattendedUpgradesBlacklistedPackages
		}
		fUnattendedUpgradesBlacklistedPackages := frUnattendedUpgradesBlacklistedPackages
		if fUnattendedUpgradesBlacklistedPackages != "" {
			if err := r.SetFormParam("unattended_upgrades_blacklisted_packages", fUnattendedUpgradesBlacklistedPackages); err != nil {
				return err
			}
		}

	}

	if o.UnattendedUpgradesReboot != nil {

		// form param unattended_upgrades_reboot
		var frUnattendedUpgradesReboot bool
		if o.UnattendedUpgradesReboot != nil {
			frUnattendedUpgradesReboot = *o.UnattendedUpgradesReboot
		}
		fUnattendedUpgradesReboot := swag.FormatBool(frUnattendedUpgradesReboot)
		if fUnattendedUpgradesReboot != "" {
			if err := r.SetFormParam("unattended_upgrades_reboot", fUnattendedUpgradesReboot); err != nil {
				return err
			}
		}

	}

	if o.UnattendedUpgradesRepos != nil {

		// form param unattended_upgrades_repos
		var frUnattendedUpgradesRepos string
		if o.UnattendedUpgradesRepos != nil {
			frUnattendedUpgradesRepos = *o.UnattendedUpgradesRepos
		}
		fUnattendedUpgradesRepos := frUnattendedUpgradesRepos
		if fUnattendedUpgradesRepos != "" {
			if err := r.SetFormParam("unattended_upgrades_repos", fUnattendedUpgradesRepos); err != nil {
				return err
			}
		}

	}

	if o.UnattendedUpgradesTime != nil {

		// form param unattended_upgrades_time
		var frUnattendedUpgradesTime string
		if o.UnattendedUpgradesTime != nil {
			frUnattendedUpgradesTime = *o.UnattendedUpgradesTime
		}
		fUnattendedUpgradesTime := frUnattendedUpgradesTime
		if fUnattendedUpgradesTime != "" {
			if err := r.SetFormParam("unattended_upgrades_time", fUnattendedUpgradesTime); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAt != nil {

		// form param updated_at
		var frUpdatedAt string
		if o.UpdatedAt != nil {
			frUpdatedAt = *o.UpdatedAt
		}
		fUpdatedAt := frUpdatedAt
		if fUpdatedAt != "" {
			if err := r.SetFormParam("updated_at", fUpdatedAt); err != nil {
				return err
			}
		}

	}

	if o.Uptime != nil {

		// form param uptime
		var frUptime int32
		if o.Uptime != nil {
			frUptime = *o.Uptime
		}
		fUptime := swag.FormatInt32(frUptime)
		if fUptime != "" {
			if err := r.SetFormParam("uptime", fUptime); err != nil {
				return err
			}
		}

	}

	if o.Vmhost != nil {

		// form param vmhost
		var frVmhost string
		if o.Vmhost != nil {
			frVmhost = *o.Vmhost
		}
		fVmhost := frVmhost
		if fVmhost != "" {
			if err := r.SetFormParam("vmhost", fVmhost); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
