// Code generated by go-swagger; DO NOT EDIT.

package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new machines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for machines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIV3MachinesRfqdn deletes a machine

Delete a machine
*/
func (a *Client) DeleteAPIV3MachinesRfqdn(params *DeleteAPIV3MachinesRfqdnParams) (*DeleteAPIV3MachinesRfqdnNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MachinesRfqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3MachinesRfqdn",
		Method:             "DELETE",
		PathPattern:        "/api/v3/machines/{rfqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3MachinesRfqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3MachinesRfqdnNoContent), nil

}

/*
DeleteAPIV3MachinesRfqdnAliasesAlias deletes an alias

Delete an alias
*/
func (a *Client) DeleteAPIV3MachinesRfqdnAliasesAlias(params *DeleteAPIV3MachinesRfqdnAliasesAliasParams) (*DeleteAPIV3MachinesRfqdnAliasesAliasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MachinesRfqdnAliasesAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3MachinesRfqdnAliasesAlias",
		Method:             "DELETE",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases/{alias}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3MachinesRfqdnAliasesAliasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3MachinesRfqdnAliasesAliasNoContent), nil

}

/*
DeleteAPIV3MachinesRfqdnAttachmentsFingerprint deletes an attachment

Delete an attachment
*/
func (a *Client) DeleteAPIV3MachinesRfqdnAttachmentsFingerprint(params *DeleteAPIV3MachinesRfqdnAttachmentsFingerprintParams) (*DeleteAPIV3MachinesRfqdnAttachmentsFingerprintNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MachinesRfqdnAttachmentsFingerprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3MachinesRfqdnAttachmentsFingerprint",
		Method:             "DELETE",
		PathPattern:        "/api/v3/machines/{rfqdn}/attachments/{fingerprint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3MachinesRfqdnAttachmentsFingerprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3MachinesRfqdnAttachmentsFingerprintNoContent), nil

}

/*
DeleteAPIV3MachinesRfqdnNicsName deletes a nic

Delete a nic
*/
func (a *Client) DeleteAPIV3MachinesRfqdnNicsName(params *DeleteAPIV3MachinesRfqdnNicsNameParams) (*DeleteAPIV3MachinesRfqdnNicsNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MachinesRfqdnNicsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3MachinesRfqdnNicsName",
		Method:             "DELETE",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3MachinesRfqdnNicsNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3MachinesRfqdnNicsNameNoContent), nil

}

/*
GetAPIV3Machines returns a list of machines possibly filtered

Return a list of machines, possibly filtered
*/
func (a *Client) GetAPIV3Machines(params *GetAPIV3MachinesParams) (*GetAPIV3MachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Machines",
		Method:             "GET",
		PathPattern:        "/api/v3/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesOK), nil

}

/*
GetAPIV3MachinesRfqdn gets a machine by fqdn

Get a machine by fqdn
*/
func (a *Client) GetAPIV3MachinesRfqdn(params *GetAPIV3MachinesRfqdnParams) (*GetAPIV3MachinesRfqdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdn",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnOK), nil

}

/*
GetAPIV3MachinesRfqdnAliases gets all aliases

Get all aliases
*/
func (a *Client) GetAPIV3MachinesRfqdnAliases(params *GetAPIV3MachinesRfqdnAliasesParams) (*GetAPIV3MachinesRfqdnAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnAliases",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnAliasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnAliasesOK), nil

}

/*
GetAPIV3MachinesRfqdnAliasesAlias gets a alias

Get a alias
*/
func (a *Client) GetAPIV3MachinesRfqdnAliasesAlias(params *GetAPIV3MachinesRfqdnAliasesAliasParams) (*GetAPIV3MachinesRfqdnAliasesAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnAliasesAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnAliasesAlias",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases/{alias}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnAliasesAliasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnAliasesAliasOK), nil

}

/*
GetAPIV3MachinesRfqdnAttachments gets all attachments

Get all attachments
*/
func (a *Client) GetAPIV3MachinesRfqdnAttachments(params *GetAPIV3MachinesRfqdnAttachmentsParams) (*GetAPIV3MachinesRfqdnAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnAttachments",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnAttachmentsOK), nil

}

/*
GetAPIV3MachinesRfqdnAttachmentsFingerprint gets an attachment

Get an attachment
*/
func (a *Client) GetAPIV3MachinesRfqdnAttachmentsFingerprint(params *GetAPIV3MachinesRfqdnAttachmentsFingerprintParams) (*GetAPIV3MachinesRfqdnAttachmentsFingerprintOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnAttachmentsFingerprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnAttachmentsFingerprint",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/attachments/{fingerprint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnAttachmentsFingerprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnAttachmentsFingerprintOK), nil

}

/*
GetAPIV3MachinesRfqdnNics gets all nics

Get all nics
*/
func (a *Client) GetAPIV3MachinesRfqdnNics(params *GetAPIV3MachinesRfqdnNicsParams) (*GetAPIV3MachinesRfqdnNicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnNicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnNics",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnNicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnNicsOK), nil

}

/*
GetAPIV3MachinesRfqdnNicsName gets a nic

Get a nic
*/
func (a *Client) GetAPIV3MachinesRfqdnNicsName(params *GetAPIV3MachinesRfqdnNicsNameParams) (*GetAPIV3MachinesRfqdnNicsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnNicsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnNicsName",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnNicsNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnNicsNameOK), nil

}

/*
PostAPIV3Machines creates a new machine

Create a new machine
*/
func (a *Client) PostAPIV3Machines(params *PostAPIV3MachinesParams) (*PostAPIV3MachinesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3Machines",
		Method:             "POST",
		PathPattern:        "/api/v3/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3MachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3MachinesCreated), nil

}

/*
PostAPIV3MachinesRfqdnAliases creates an alias

Create an alias
*/
func (a *Client) PostAPIV3MachinesRfqdnAliases(params *PostAPIV3MachinesRfqdnAliasesParams) (*PostAPIV3MachinesRfqdnAliasesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MachinesRfqdnAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3MachinesRfqdnAliases",
		Method:             "POST",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3MachinesRfqdnAliasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3MachinesRfqdnAliasesCreated), nil

}

/*
PostAPIV3MachinesRfqdnAttachments creates an attachment

Create an attachment
*/
func (a *Client) PostAPIV3MachinesRfqdnAttachments(params *PostAPIV3MachinesRfqdnAttachmentsParams) (*PostAPIV3MachinesRfqdnAttachmentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MachinesRfqdnAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3MachinesRfqdnAttachments",
		Method:             "POST",
		PathPattern:        "/api/v3/machines/{rfqdn}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3MachinesRfqdnAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3MachinesRfqdnAttachmentsCreated), nil

}

/*
PostAPIV3MachinesRfqdnNics creates a nic

Create a nic
*/
func (a *Client) PostAPIV3MachinesRfqdnNics(params *PostAPIV3MachinesRfqdnNicsParams) (*PostAPIV3MachinesRfqdnNicsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MachinesRfqdnNicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3MachinesRfqdnNics",
		Method:             "POST",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3MachinesRfqdnNicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3MachinesRfqdnNicsCreated), nil

}

/*
PutAPIV3MachinesRfqdn updates a single machine

Update a single machine
*/
func (a *Client) PutAPIV3MachinesRfqdn(params *PutAPIV3MachinesRfqdnParams) (*PutAPIV3MachinesRfqdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3MachinesRfqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3MachinesRfqdn",
		Method:             "PUT",
		PathPattern:        "/api/v3/machines/{rfqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3MachinesRfqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3MachinesRfqdnOK), nil

}

/*
PutAPIV3MachinesRfqdnAliasesAlias updates an alias

Update an alias
*/
func (a *Client) PutAPIV3MachinesRfqdnAliasesAlias(params *PutAPIV3MachinesRfqdnAliasesAliasParams) (*PutAPIV3MachinesRfqdnAliasesAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3MachinesRfqdnAliasesAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3MachinesRfqdnAliasesAlias",
		Method:             "PUT",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases/{alias}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3MachinesRfqdnAliasesAliasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3MachinesRfqdnAliasesAliasOK), nil

}

/*
PutAPIV3MachinesRfqdnNicsName updates a nic

Update a nic
*/
func (a *Client) PutAPIV3MachinesRfqdnNicsName(params *PutAPIV3MachinesRfqdnNicsNameParams) (*PutAPIV3MachinesRfqdnNicsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3MachinesRfqdnNicsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3MachinesRfqdnNicsName",
		Method:             "PUT",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3MachinesRfqdnNicsNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3MachinesRfqdnNicsNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
