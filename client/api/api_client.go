// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIV3CloudProvidersRname deletes cloud provider by name

Delete cloud provider by name
*/
func (a *Client) DeleteAPIV3CloudProvidersRname(params *DeleteAPIV3CloudProvidersRnameParams) (*DeleteAPIV3CloudProvidersRnameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3CloudProvidersRnameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3CloudProvidersRname",
		Method:             "DELETE",
		PathPattern:        "/api/v3/cloud_providers/{rname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3CloudProvidersRnameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3CloudProvidersRnameNoContent), nil

}

/*
DeleteAPIV3InventoriesInventoryNumber deletes a inventory

Delete a inventory
*/
func (a *Client) DeleteAPIV3InventoriesInventoryNumber(params *DeleteAPIV3InventoriesInventoryNumberParams) (*DeleteAPIV3InventoriesInventoryNumberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3InventoriesInventoryNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3InventoriesInventoryNumber",
		Method:             "DELETE",
		PathPattern:        "/api/v3/inventories/{inventory_number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3InventoriesInventoryNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3InventoriesInventoryNumberNoContent), nil

}

/*
DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprint deletes an attachment

Delete an attachment
*/
func (a *Client) DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprint(params *DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintParams) (*DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3InventoriesInventoryNumberAttachmentsFingerprint",
		Method:             "DELETE",
		PathPattern:        "/api/v3/inventories/{inventory_number}/attachments/{fingerprint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3InventoriesInventoryNumberAttachmentsFingerprintNoContent), nil

}

/*
DeleteAPIV3LocationsIDID deletes a location

Delete a location
*/
func (a *Client) DeleteAPIV3LocationsIDID(params *DeleteAPIV3LocationsIDIDParams) (*DeleteAPIV3LocationsIDIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3LocationsIDIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3LocationsIdId",
		Method:             "DELETE",
		PathPattern:        "/api/v3/locations/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3LocationsIDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3LocationsIDIDNoContent), nil

}

/*
DeleteAPIV3MachinesRfqdn deletes a machine

Delete a machine
*/
func (a *Client) DeleteAPIV3MachinesRfqdn(params *DeleteAPIV3MachinesRfqdnParams) (*DeleteAPIV3MachinesRfqdnNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MachinesRfqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3MachinesRfqdn",
		Method:             "DELETE",
		PathPattern:        "/api/v3/machines/{rfqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3MachinesRfqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3MachinesRfqdnNoContent), nil

}

/*
DeleteAPIV3MachinesRfqdnAliasesAlias deletes an alias

Delete an alias
*/
func (a *Client) DeleteAPIV3MachinesRfqdnAliasesAlias(params *DeleteAPIV3MachinesRfqdnAliasesAliasParams) (*DeleteAPIV3MachinesRfqdnAliasesAliasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MachinesRfqdnAliasesAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3MachinesRfqdnAliasesAlias",
		Method:             "DELETE",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases/{alias}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3MachinesRfqdnAliasesAliasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3MachinesRfqdnAliasesAliasNoContent), nil

}

/*
DeleteAPIV3MachinesRfqdnAttachmentsFingerprint deletes an attachment

Delete an attachment
*/
func (a *Client) DeleteAPIV3MachinesRfqdnAttachmentsFingerprint(params *DeleteAPIV3MachinesRfqdnAttachmentsFingerprintParams) (*DeleteAPIV3MachinesRfqdnAttachmentsFingerprintNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MachinesRfqdnAttachmentsFingerprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3MachinesRfqdnAttachmentsFingerprint",
		Method:             "DELETE",
		PathPattern:        "/api/v3/machines/{rfqdn}/attachments/{fingerprint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3MachinesRfqdnAttachmentsFingerprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3MachinesRfqdnAttachmentsFingerprintNoContent), nil

}

/*
DeleteAPIV3MachinesRfqdnNicsRnic deletes a nic

Delete a nic
*/
func (a *Client) DeleteAPIV3MachinesRfqdnNicsRnic(params *DeleteAPIV3MachinesRfqdnNicsRnicParams) (*DeleteAPIV3MachinesRfqdnNicsRnicNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3MachinesRfqdnNicsRnicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3MachinesRfqdnNicsRnic",
		Method:             "DELETE",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics/{rnic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3MachinesRfqdnNicsRnicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3MachinesRfqdnNicsRnicNoContent), nil

}

/*
DeleteAPIV3NicsID deletes a single nic

Delete a single nic
*/
func (a *Client) DeleteAPIV3NicsID(params *DeleteAPIV3NicsIDParams) (*DeleteAPIV3NicsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3NicsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3NicsId",
		Method:             "DELETE",
		PathPattern:        "/api/v3/nics/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3NicsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3NicsIDNoContent), nil

}

/*
DeleteAPIV3SwitchesFqdn deletes a switch

Delete a switch
*/
func (a *Client) DeleteAPIV3SwitchesFqdn(params *DeleteAPIV3SwitchesFqdnParams) (*DeleteAPIV3SwitchesFqdnNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3SwitchesFqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3SwitchesFqdn",
		Method:             "DELETE",
		PathPattern:        "/api/v3/switches/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3SwitchesFqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3SwitchesFqdnNoContent), nil

}

/*
DeleteAPIV3SwitchesFqdnPortsNumber deletes a switch port

Delete a switch port
*/
func (a *Client) DeleteAPIV3SwitchesFqdnPortsNumber(params *DeleteAPIV3SwitchesFqdnPortsNumberParams) (*DeleteAPIV3SwitchesFqdnPortsNumberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV3SwitchesFqdnPortsNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiV3SwitchesFqdnPortsNumber",
		Method:             "DELETE",
		PathPattern:        "/api/v3/switches/{fqdn}/ports/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV3SwitchesFqdnPortsNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV3SwitchesFqdnPortsNumberNoContent), nil

}

/*
GetAPIV3CloudProviders returns a list of cloud providers possibly filtered

Return a list of cloud providers, possibly filtered
*/
func (a *Client) GetAPIV3CloudProviders(params *GetAPIV3CloudProvidersParams) (*GetAPIV3CloudProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3CloudProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3CloudProviders",
		Method:             "GET",
		PathPattern:        "/api/v3/cloud_providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3CloudProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3CloudProvidersOK), nil

}

/*
GetAPIV3CloudProvidersRname gets cloud provider by name

Get cloud provider by name
*/
func (a *Client) GetAPIV3CloudProvidersRname(params *GetAPIV3CloudProvidersRnameParams) (*GetAPIV3CloudProvidersRnameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3CloudProvidersRnameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3CloudProvidersRname",
		Method:             "GET",
		PathPattern:        "/api/v3/cloud_providers/{rname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3CloudProvidersRnameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3CloudProvidersRnameOK), nil

}

/*
GetAPIV3Inventories returns a list of inventories possibly filtered

Return a list of inventories, possibly filtered
*/
func (a *Client) GetAPIV3Inventories(params *GetAPIV3InventoriesParams) (*GetAPIV3InventoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3InventoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Inventories",
		Method:             "GET",
		PathPattern:        "/api/v3/inventories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3InventoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3InventoriesOK), nil

}

/*
GetAPIV3InventoriesInventoryNumber gets a inventory by inventory number

Get a inventory by inventory number
*/
func (a *Client) GetAPIV3InventoriesInventoryNumber(params *GetAPIV3InventoriesInventoryNumberParams) (*GetAPIV3InventoriesInventoryNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3InventoriesInventoryNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3InventoriesInventoryNumber",
		Method:             "GET",
		PathPattern:        "/api/v3/inventories/{inventory_number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3InventoriesInventoryNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3InventoriesInventoryNumberOK), nil

}

/*
GetAPIV3InventoriesInventoryNumberAttachments gets all attachments

Get all attachments
*/
func (a *Client) GetAPIV3InventoriesInventoryNumberAttachments(params *GetAPIV3InventoriesInventoryNumberAttachmentsParams) (*GetAPIV3InventoriesInventoryNumberAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3InventoriesInventoryNumberAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3InventoriesInventoryNumberAttachments",
		Method:             "GET",
		PathPattern:        "/api/v3/inventories/{inventory_number}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3InventoriesInventoryNumberAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3InventoriesInventoryNumberAttachmentsOK), nil

}

/*
GetAPIV3InventoriesInventoryNumberAttachmentsFingerprint gets an attachment

Get an attachment
*/
func (a *Client) GetAPIV3InventoriesInventoryNumberAttachmentsFingerprint(params *GetAPIV3InventoriesInventoryNumberAttachmentsFingerprintParams) (*GetAPIV3InventoriesInventoryNumberAttachmentsFingerprintOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3InventoriesInventoryNumberAttachmentsFingerprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3InventoriesInventoryNumberAttachmentsFingerprint",
		Method:             "GET",
		PathPattern:        "/api/v3/inventories/{inventory_number}/attachments/{fingerprint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3InventoriesInventoryNumberAttachmentsFingerprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3InventoriesInventoryNumberAttachmentsFingerprintOK), nil

}

/*
GetAPIV3Locations returns a list of locations possibly filtered

Return a list of locations, possibly filtered
*/
func (a *Client) GetAPIV3Locations(params *GetAPIV3LocationsParams) (*GetAPIV3LocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Locations",
		Method:             "GET",
		PathPattern:        "/api/v3/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3LocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3LocationsOK), nil

}

/*
GetAPIV3LocationsIDID gets location by id

Get location by id
*/
func (a *Client) GetAPIV3LocationsIDID(params *GetAPIV3LocationsIDIDParams) (*GetAPIV3LocationsIDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LocationsIDIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3LocationsIdId",
		Method:             "GET",
		PathPattern:        "/api/v3/locations/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3LocationsIDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3LocationsIDIDOK), nil

}

/*
GetAPIV3LocationsLevels gets a list of all location levels possibly filtered

Get a list of all location levels, possibly filtered
*/
func (a *Client) GetAPIV3LocationsLevels(params *GetAPIV3LocationsLevelsParams) (*GetAPIV3LocationsLevelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LocationsLevelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3LocationsLevels",
		Method:             "GET",
		PathPattern:        "/api/v3/locations/levels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3LocationsLevelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3LocationsLevelsOK), nil

}

/*
GetAPIV3LocationsRoots gets the location roots

Get the location roots
*/
func (a *Client) GetAPIV3LocationsRoots(params *GetAPIV3LocationsRootsParams) (*GetAPIV3LocationsRootsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3LocationsRootsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3LocationsRoots",
		Method:             "GET",
		PathPattern:        "/api/v3/locations/roots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3LocationsRootsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3LocationsRootsOK), nil

}

/*
GetAPIV3Machines returns a list of machines possibly filtered

Return a list of machines, possibly filtered
*/
func (a *Client) GetAPIV3Machines(params *GetAPIV3MachinesParams) (*GetAPIV3MachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Machines",
		Method:             "GET",
		PathPattern:        "/api/v3/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesOK), nil

}

/*
GetAPIV3MachinesRfqdn gets a machine by fqdn

Get a machine by fqdn
*/
func (a *Client) GetAPIV3MachinesRfqdn(params *GetAPIV3MachinesRfqdnParams) (*GetAPIV3MachinesRfqdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdn",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnOK), nil

}

/*
GetAPIV3MachinesRfqdnAliases gets all aliases

Get all aliases
*/
func (a *Client) GetAPIV3MachinesRfqdnAliases(params *GetAPIV3MachinesRfqdnAliasesParams) (*GetAPIV3MachinesRfqdnAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnAliases",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnAliasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnAliasesOK), nil

}

/*
GetAPIV3MachinesRfqdnAliasesAlias gets a alias

Get a alias
*/
func (a *Client) GetAPIV3MachinesRfqdnAliasesAlias(params *GetAPIV3MachinesRfqdnAliasesAliasParams) (*GetAPIV3MachinesRfqdnAliasesAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnAliasesAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnAliasesAlias",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases/{alias}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnAliasesAliasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnAliasesAliasOK), nil

}

/*
GetAPIV3MachinesRfqdnAttachments gets all attachments

Get all attachments
*/
func (a *Client) GetAPIV3MachinesRfqdnAttachments(params *GetAPIV3MachinesRfqdnAttachmentsParams) (*GetAPIV3MachinesRfqdnAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnAttachments",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnAttachmentsOK), nil

}

/*
GetAPIV3MachinesRfqdnAttachmentsFingerprint gets an attachment

Get an attachment
*/
func (a *Client) GetAPIV3MachinesRfqdnAttachmentsFingerprint(params *GetAPIV3MachinesRfqdnAttachmentsFingerprintParams) (*GetAPIV3MachinesRfqdnAttachmentsFingerprintOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnAttachmentsFingerprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnAttachmentsFingerprint",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/attachments/{fingerprint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnAttachmentsFingerprintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnAttachmentsFingerprintOK), nil

}

/*
GetAPIV3MachinesRfqdnNics gets all nics

Get all nics
*/
func (a *Client) GetAPIV3MachinesRfqdnNics(params *GetAPIV3MachinesRfqdnNicsParams) (*GetAPIV3MachinesRfqdnNicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnNicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnNics",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnNicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnNicsOK), nil

}

/*
GetAPIV3MachinesRfqdnNicsRnic gets a nic

Get a nic
*/
func (a *Client) GetAPIV3MachinesRfqdnNicsRnic(params *GetAPIV3MachinesRfqdnNicsRnicParams) (*GetAPIV3MachinesRfqdnNicsRnicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3MachinesRfqdnNicsRnicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3MachinesRfqdnNicsRnic",
		Method:             "GET",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics/{rnic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3MachinesRfqdnNicsRnicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3MachinesRfqdnNicsRnicOK), nil

}

/*
GetAPIV3Nics returns a list of nics possibly filtered

Return a list of nics, possibly filtered
*/
func (a *Client) GetAPIV3Nics(params *GetAPIV3NicsParams) (*GetAPIV3NicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3NicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Nics",
		Method:             "GET",
		PathPattern:        "/api/v3/nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3NicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3NicsOK), nil

}

/*
GetAPIV3NicsID gets a nic by id

Get a nic by id
*/
func (a *Client) GetAPIV3NicsID(params *GetAPIV3NicsIDParams) (*GetAPIV3NicsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3NicsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3NicsId",
		Method:             "GET",
		PathPattern:        "/api/v3/nics/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3NicsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3NicsIDOK), nil

}

/*
GetAPIV3Softwares searches machines with specific software configurations

Searches machines with specific software configurations
*/
func (a *Client) GetAPIV3Softwares(params *GetAPIV3SoftwaresParams) (*GetAPIV3SoftwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SoftwaresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Softwares",
		Method:             "GET",
		PathPattern:        "/api/v3/softwares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SoftwaresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SoftwaresOK), nil

}

/*
GetAPIV3Switches returns a list of switches possibly filtered

Return a list of switches, possibly filtered
*/
func (a *Client) GetAPIV3Switches(params *GetAPIV3SwitchesParams) (*GetAPIV3SwitchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SwitchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3Switches",
		Method:             "GET",
		PathPattern:        "/api/v3/switches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SwitchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SwitchesOK), nil

}

/*
GetAPIV3SwitchesFqdn gets a switch by fqdn

Get a switch by fqdn
*/
func (a *Client) GetAPIV3SwitchesFqdn(params *GetAPIV3SwitchesFqdnParams) (*GetAPIV3SwitchesFqdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SwitchesFqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3SwitchesFqdn",
		Method:             "GET",
		PathPattern:        "/api/v3/switches/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SwitchesFqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SwitchesFqdnOK), nil

}

/*
GetAPIV3SwitchesFqdnPorts returns a list of switch ports

Return a list of switch ports
*/
func (a *Client) GetAPIV3SwitchesFqdnPorts(params *GetAPIV3SwitchesFqdnPortsParams) (*GetAPIV3SwitchesFqdnPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SwitchesFqdnPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3SwitchesFqdnPorts",
		Method:             "GET",
		PathPattern:        "/api/v3/switches/{fqdn}/ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SwitchesFqdnPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SwitchesFqdnPortsOK), nil

}

/*
GetAPIV3SwitchesFqdnPortsNumber gets a switch port

Get a switch port
*/
func (a *Client) GetAPIV3SwitchesFqdnPortsNumber(params *GetAPIV3SwitchesFqdnPortsNumberParams) (*GetAPIV3SwitchesFqdnPortsNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV3SwitchesFqdnPortsNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiV3SwitchesFqdnPortsNumber",
		Method:             "GET",
		PathPattern:        "/api/v3/switches/{fqdn}/ports/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV3SwitchesFqdnPortsNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV3SwitchesFqdnPortsNumberOK), nil

}

/*
PostAPIV3CloudProviders creates a new cloud provider

Create a new cloud provider
*/
func (a *Client) PostAPIV3CloudProviders(params *PostAPIV3CloudProvidersParams) (*PostAPIV3CloudProvidersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3CloudProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3CloudProviders",
		Method:             "POST",
		PathPattern:        "/api/v3/cloud_providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3CloudProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3CloudProvidersCreated), nil

}

/*
PostAPIV3Inventories creates a new inventory

Create a new inventory
*/
func (a *Client) PostAPIV3Inventories(params *PostAPIV3InventoriesParams) (*PostAPIV3InventoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3InventoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3Inventories",
		Method:             "POST",
		PathPattern:        "/api/v3/inventories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3InventoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3InventoriesCreated), nil

}

/*
PostAPIV3InventoriesInventoryNumberAttachments creates an attachment

Create an attachment
*/
func (a *Client) PostAPIV3InventoriesInventoryNumberAttachments(params *PostAPIV3InventoriesInventoryNumberAttachmentsParams) (*PostAPIV3InventoriesInventoryNumberAttachmentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3InventoriesInventoryNumberAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3InventoriesInventoryNumberAttachments",
		Method:             "POST",
		PathPattern:        "/api/v3/inventories/{inventory_number}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3InventoriesInventoryNumberAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3InventoriesInventoryNumberAttachmentsCreated), nil

}

/*
PostAPIV3LocationsIDID creates a new child location

Create a new child location
*/
func (a *Client) PostAPIV3LocationsIDID(params *PostAPIV3LocationsIDIDParams) (*PostAPIV3LocationsIDIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3LocationsIDIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3LocationsIdId",
		Method:             "POST",
		PathPattern:        "/api/v3/locations/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3LocationsIDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3LocationsIDIDCreated), nil

}

/*
PostAPIV3LocationsRoots creates a new location root

Create a new location root
*/
func (a *Client) PostAPIV3LocationsRoots(params *PostAPIV3LocationsRootsParams) (*PostAPIV3LocationsRootsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3LocationsRootsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3LocationsRoots",
		Method:             "POST",
		PathPattern:        "/api/v3/locations/roots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3LocationsRootsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3LocationsRootsCreated), nil

}

/*
PostAPIV3Machines creates a new machine

Create a new machine
*/
func (a *Client) PostAPIV3Machines(params *PostAPIV3MachinesParams) (*PostAPIV3MachinesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3Machines",
		Method:             "POST",
		PathPattern:        "/api/v3/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3MachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3MachinesCreated), nil

}

/*
PostAPIV3MachinesRfqdnAliases creates an alias

Create an alias
*/
func (a *Client) PostAPIV3MachinesRfqdnAliases(params *PostAPIV3MachinesRfqdnAliasesParams) (*PostAPIV3MachinesRfqdnAliasesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MachinesRfqdnAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3MachinesRfqdnAliases",
		Method:             "POST",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3MachinesRfqdnAliasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3MachinesRfqdnAliasesCreated), nil

}

/*
PostAPIV3MachinesRfqdnAttachments creates an attachment

Create an attachment
*/
func (a *Client) PostAPIV3MachinesRfqdnAttachments(params *PostAPIV3MachinesRfqdnAttachmentsParams) (*PostAPIV3MachinesRfqdnAttachmentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MachinesRfqdnAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3MachinesRfqdnAttachments",
		Method:             "POST",
		PathPattern:        "/api/v3/machines/{rfqdn}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3MachinesRfqdnAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3MachinesRfqdnAttachmentsCreated), nil

}

/*
PostAPIV3MachinesRfqdnNics creates a nic

Create a nic
*/
func (a *Client) PostAPIV3MachinesRfqdnNics(params *PostAPIV3MachinesRfqdnNicsParams) (*PostAPIV3MachinesRfqdnNicsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3MachinesRfqdnNicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3MachinesRfqdnNics",
		Method:             "POST",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3MachinesRfqdnNicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3MachinesRfqdnNicsCreated), nil

}

/*
PostAPIV3Nics creates a new nic

Create a new nic
*/
func (a *Client) PostAPIV3Nics(params *PostAPIV3NicsParams) (*PostAPIV3NicsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3NicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3Nics",
		Method:             "POST",
		PathPattern:        "/api/v3/nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3NicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3NicsCreated), nil

}

/*
PostAPIV3Switches creates a new switch

Create a new switch
*/
func (a *Client) PostAPIV3Switches(params *PostAPIV3SwitchesParams) (*PostAPIV3SwitchesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3SwitchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3Switches",
		Method:             "POST",
		PathPattern:        "/api/v3/switches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3SwitchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3SwitchesCreated), nil

}

/*
PostAPIV3SwitchesFqdnPorts adds a new switch port

Add a new switch port
*/
func (a *Client) PostAPIV3SwitchesFqdnPorts(params *PostAPIV3SwitchesFqdnPortsParams) (*PostAPIV3SwitchesFqdnPortsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV3SwitchesFqdnPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postApiV3SwitchesFqdnPorts",
		Method:             "POST",
		PathPattern:        "/api/v3/switches/{fqdn}/ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV3SwitchesFqdnPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV3SwitchesFqdnPortsCreated), nil

}

/*
PutAPIV3CloudProvidersRname updates a single cloud provider

Update a single cloud provider
*/
func (a *Client) PutAPIV3CloudProvidersRname(params *PutAPIV3CloudProvidersRnameParams) (*PutAPIV3CloudProvidersRnameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3CloudProvidersRnameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3CloudProvidersRname",
		Method:             "PUT",
		PathPattern:        "/api/v3/cloud_providers/{rname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3CloudProvidersRnameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3CloudProvidersRnameOK), nil

}

/*
PutAPIV3InventoriesInventoryNumber updates a single inventory

Update a single inventory
*/
func (a *Client) PutAPIV3InventoriesInventoryNumber(params *PutAPIV3InventoriesInventoryNumberParams) (*PutAPIV3InventoriesInventoryNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3InventoriesInventoryNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3InventoriesInventoryNumber",
		Method:             "PUT",
		PathPattern:        "/api/v3/inventories/{inventory_number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3InventoriesInventoryNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3InventoriesInventoryNumberOK), nil

}

/*
PutAPIV3LocationsIDID updates a location

Update a location
*/
func (a *Client) PutAPIV3LocationsIDID(params *PutAPIV3LocationsIDIDParams) (*PutAPIV3LocationsIDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3LocationsIDIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3LocationsIdId",
		Method:             "PUT",
		PathPattern:        "/api/v3/locations/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3LocationsIDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3LocationsIDIDOK), nil

}

/*
PutAPIV3MachinesRfqdn updates a single machine

Update a single machine
*/
func (a *Client) PutAPIV3MachinesRfqdn(params *PutAPIV3MachinesRfqdnParams) (*PutAPIV3MachinesRfqdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3MachinesRfqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3MachinesRfqdn",
		Method:             "PUT",
		PathPattern:        "/api/v3/machines/{rfqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3MachinesRfqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3MachinesRfqdnOK), nil

}

/*
PutAPIV3MachinesRfqdnAliasesAlias updates an alias

Update an alias
*/
func (a *Client) PutAPIV3MachinesRfqdnAliasesAlias(params *PutAPIV3MachinesRfqdnAliasesAliasParams) (*PutAPIV3MachinesRfqdnAliasesAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3MachinesRfqdnAliasesAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3MachinesRfqdnAliasesAlias",
		Method:             "PUT",
		PathPattern:        "/api/v3/machines/{rfqdn}/aliases/{alias}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3MachinesRfqdnAliasesAliasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3MachinesRfqdnAliasesAliasOK), nil

}

/*
PutAPIV3MachinesRfqdnNicsRnic updates a nic

Update a nic
*/
func (a *Client) PutAPIV3MachinesRfqdnNicsRnic(params *PutAPIV3MachinesRfqdnNicsRnicParams) (*PutAPIV3MachinesRfqdnNicsRnicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3MachinesRfqdnNicsRnicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3MachinesRfqdnNicsRnic",
		Method:             "PUT",
		PathPattern:        "/api/v3/machines/{rfqdn}/nics/{rnic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3MachinesRfqdnNicsRnicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3MachinesRfqdnNicsRnicOK), nil

}

/*
PutAPIV3NicsID updates a single nic

Update a single nic
*/
func (a *Client) PutAPIV3NicsID(params *PutAPIV3NicsIDParams) (*PutAPIV3NicsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3NicsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3NicsId",
		Method:             "PUT",
		PathPattern:        "/api/v3/nics/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3NicsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3NicsIDOK), nil

}

/*
PutAPIV3SwitchesFqdn updates a switch

Update a switch
*/
func (a *Client) PutAPIV3SwitchesFqdn(params *PutAPIV3SwitchesFqdnParams) (*PutAPIV3SwitchesFqdnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3SwitchesFqdnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3SwitchesFqdn",
		Method:             "PUT",
		PathPattern:        "/api/v3/switches/{fqdn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3SwitchesFqdnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3SwitchesFqdnOK), nil

}

/*
PutAPIV3SwitchesFqdnPortsNumber updates a switch port

Update a switch port
*/
func (a *Client) PutAPIV3SwitchesFqdnPortsNumber(params *PutAPIV3SwitchesFqdnPortsNumberParams) (*PutAPIV3SwitchesFqdnPortsNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV3SwitchesFqdnPortsNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putApiV3SwitchesFqdnPortsNumber",
		Method:             "PUT",
		PathPattern:        "/api/v3/switches/{fqdn}/ports/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV3SwitchesFqdnPortsNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIV3SwitchesFqdnPortsNumberOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
